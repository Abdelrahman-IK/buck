/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.buck.apple.clang;

import com.google.common.base.Objects;
import com.google.common.collect.ImmutableList;
import java.nio.file.Path;
import java.util.List;
import java.util.Set;
import org.stringtemplate.v4.ST;

/**
 * Creates a modulemap file that uses an explicit `header` declaration for each header in the
 * module.
 */
public class ModuleMap {
  /**
   * Modulemaps can optionally include the "-Swift.h" header generated by the Swift compiler.
   *
   * <p>There are two reasons to exclude this header from a modulemap. The simple case is if the
   * target does not contain Swift code. The second case is when compiling the Swift code of the
   * module, as the header cannot exist until the Swift code has been compiled.
   */
  public enum SwiftMode {
    NO_SWIFT,
    INCLUDE_SWIFT_HEADER;

    /** @return `true` if the rendered modulemap should include the "-Swift.h" header. */
    public boolean includeSwift() {
      switch (this) {
        case NO_SWIFT:
          return false;
        case INCLUDE_SWIFT_HEADER:
          return true;
      }

      throw new RuntimeException();
    }
  }

  private String moduleName;
  private List<String> headers;
  private SwiftMode swiftMode;

  ModuleMap(String moduleName, SwiftMode swiftMode, List<String> headers) {
    this.moduleName = moduleName;
    this.swiftMode = swiftMode;
    this.headers = headers;
  }

  /**
   * Creates a module map.
   *
   * @param moduleName The name of the module.
   * @param headerPaths The exported headers of the module.
   * @param swiftMode Whether or not to include the "-Swift.h" header in the modulemap.
   * @return A module map instance.
   */
  public static ModuleMap create(String moduleName, SwiftMode swiftMode, Set<Path> headerPaths) {
    String stripPrefix = moduleName + "/";
    List<String> headers =
        headerPaths.stream()
            .map(
                path -> {
                  String relativePath = path.toString();
                  return relativePath.startsWith(stripPrefix)
                      ? relativePath.substring(stripPrefix.length())
                      : relativePath;
                })
            .sorted()
            .collect(ImmutableList.toImmutableList());

    return new ModuleMap(moduleName, swiftMode, headers);
  }

  private static final String template =
      "module <module_name> {\n"
          + "    <headers :{ name | header \"<name>\"\n }>"
          + "\n"
          + "    export *\n"
          + "}\n"
          + "\n"
          + "<if(include_swift_header)>"
          + "module <module_name>.Swift {\n"
          + "    header \"<module_name>-Swift.h\"\n"
          + "    requires objc\n"
          + "}\n"
          + "<endif>"
          + "\n";

  /**
   * Renders the modulemap to a string, to be written to a .modulemap file.
   *
   * @return A string representation of the modulemap.
   */
  public String render() {
    return new ST(template)
        .add("module_name", moduleName)
        .add("headers", headers)
        .add("include_swift_header", swiftMode.includeSwift())
        .render();
  }

  @Override
  public boolean equals(Object obj) {
    if (!(obj instanceof ModuleMap)) {
      return false;
    }

    ModuleMap other = (ModuleMap) obj;
    return Objects.equal(moduleName, other.moduleName)
        && Objects.equal(headers, other.headers)
        && Objects.equal(swiftMode, other.swiftMode);
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(moduleName, headers, swiftMode);
  }
}
