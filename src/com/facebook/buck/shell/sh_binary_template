<!
This template creates a shell script that invokes a user shell script in a simple sandbox.

Expects the following template arguments:

path_to_project_root_file - path relative to this script's directory to the "project_root" file
    in buck-out. That file is expected to contain the path of the project root.
script_to_run - path (relative to the __default__ cell link) for the script to run
resources - TODO(cjhopman): Figure out what these two resources mean and why they both exist
default_runtime_resources - TODO(cjhopman): Figure out what these two resources mean and why they both exist
cell_names - list of cell names (including a __default__ for this script's own cell)
cell_paths - list of paths corresponding to the names in cell_names

!><\\>
#!/bin/bash
# Run with -e so the script will fail if any of the steps fail.
set -e

SCRIPT_TO_RUN=<script_to_run>
DEFAULT_RUNTIME_RESOURCES_RELATIVE=<default_runtime_resources>

BUCK_PROJECT_ROOT_FILE=<path_to_project_root_file>
# This script can be cached and used on machines other than the one where it was created. That
# means it can't contain any absolute filepaths. Expose the absolute filepath of the root of
# the project as $BUCK_REAL_ROOT, determined at runtime.

# A portable implementation of `realpath` / `readlink -e`
# This is needed in order to resolve the actual path to the sh_binary() script
# if it is invoked through a symlink.  We need to find the actual path before
# searching upwards for the buck project root.
function readlink_e() {
    local path="$1"
    readlink -e "$path" 2>/dev/null && return

    # macosx / bsd readlink doesn't support -e
    # so use pwd -P with some recursive readlinking

    # strip trailing /
    path="${path%/}"

    # make path an absolute path
    if [[ "${path:0:1}" != "/" ]]
    then
        path="$(pwd -P)/$path"
    fi

    local slash_basename=""
    local counter=0
    while [[ -h "$path" ]]
    do
        if [[ counter -gt 200 ]]
        then
            echo "ERROR: Cyclical symbolic link detected: $path" 1>&2
            return
        fi
        counter=$(( counter + 1 ))

        target="$(readlink "$path")"
        if [[ "${target:0:1}" == "/" ]]
        then
            path="$target"
        else
            slash_basename="/$(basename "$path")"
            path="${path%$slash_basename}/$target"
        fi
    done

    # determine the target
    slash_basename="/$(basename "$path")"
    if [[ "$slash_basename" == "/.." || "$slash_basename" == "/." ]]
    then
        slash_basename=""
    fi
    local parent_dir="${path%$slash_basename}"

    # subshell to preserve the cwd (instead of pushd/popd)
    (cd "$parent_dir"; echo "$(pwd -P)$slash_basename")
}

# `cd` can produce output under specific configuration (for example, when CDPATH is present),
# redirecting its output to /dev/null
BUCK_REAL_ROOT="$(cd "$(dirname $(readlink_e "${BASH_SOURCE[0]}"))" >/dev/null && pwd)"
BUCK_PROJECT_ROOT_FILE_LOCATION="$BUCK_REAL_ROOT/$BUCK_PROJECT_ROOT_FILE"
if [ ! -f "$BUCK_PROJECT_ROOT_FILE_LOCATION" ]; then
  (>&2 echo "Failed to check that $BUCK_PROJECT_ROOT_FILE_LOCATION is a file")
  if [ ! -e "$BUCK_PROJECT_ROOT_FILE_LOCATION" ]; then
    (>&2 echo "$BUCK_PROJECT_ROOT_FILE_LOCATION doesn't exist")
  fi
  (>&2 echo "BUCK_REAL_ROOT: $BUCK_REAL_ROOT")
  (>&2 echo "BUCK_PROJECT_ROOT_FILE: $BUCK_PROJECT_ROOT_FILE")
  exit 1
fi
BUCK_PROJECT_ROOT="$(cat $BUCK_PROJECT_ROOT_FILE_LOCATION)"
export BUCK_DEFAULT_RUNTIME_RESOURCES="$BUCK_PROJECT_ROOT/$DEFAULT_RUNTIME_RESOURCES_RELATIVE"

BUCK_TMP_ROOT="$(mktemp -d $BUCK_REAL_ROOT/sh_binary.XXXXXXXXXX)"
trap "rm -rf $BUCK_TMP_ROOT" EXIT HUP INT TERM

# Setup the symlinks in a subshell to avoid modifying state (e.g. chdir).
(
  cd "$BUCK_TMP_ROOT"

  # Create symlink to the cells in the folder containing this script.
  CELLS_NAMES=(
  <cell_names:{x|   <x><\n>}>
  )
  CELLS_PATHS=(
  <cell_paths:{x|   <x><\n>}>
  )

  # TODO(cjhopman): This is crazy. we are modifying the binary's own output directory here. Why
  # wouldn't this have just been done in java?
  # I think this code is creating a symlink for each cell at a path of basically
  # `dirname <<THIS_SCRIPT>>`/cells/<cell_name>. But there's no reason to do that here, and it
  # forces us to do really complex stuff to get it correct. The code is hard to follow, so I came
  # to the conclusion based on observation.
  # Also, what are these even used for? The path that they are at isn't exported to the user script?
  # The following operation needs to be atomic.
  if [ ! -d "$BUCK_REAL_ROOT/cells/" ] ; then
    tmpfolder="`mktemp -d "$BUCK_REAL_ROOT/tmp.XXXXXXXXXX"`"
    for idx in "${!CELLS_NAMES[@]}"; do
      name="${CELLS_NAMES[$idx]}"
      path="${CELLS_PATHS[$idx]}"
      ln -sf "$BUCK_PROJECT_ROOT/$path" "$tmpfolder/$name"
    done
    mv -n "$tmpfolder/" "$BUCK_REAL_ROOT/cells/" 2>/dev/null || true
  fi

  # Symlink the resources to the $BUCK_TMP_ROOT directory.
  SYMLINK_PATHS=(
  <resources:{x|   <x><\n>}>
    "__default__/$SCRIPT_TO_RUN"
  )

  # TODO(cjhopman): Why do we do this here? We already create links for these in Java.
  # This code appears to be creating links for all of our resources in the invocation-specific
  # directory pointing back at the files through the cell symlinks we created above... Why do we do
  # this? And how do we expect people to access these paths?
  for path in "${SYMLINK_PATHS[@]}"; do
    mkdir -p "$(dirname "$path")"
    ln -sf "$BUCK_REAL_ROOT/cells/$path" "$BUCK_TMP_ROOT/$path"
  done
)

# It seems like people can access resources through either BUCK_PROJECT_ROOT, in which case they
# are accessing invocation-specific links or through BUCK_DEFAULT_RUNTIME_RESOURCES in which case
# they are accessing the links created in Java. #1, there's no reason to have invocation-specific
# links. #2 there's also no reason to have multiple structures of these links laid out.
export BUCK_PROJECT_ROOT="$BUCK_TMP_ROOT/__default__"
exec "$BUCK_TMP_ROOT/__default__/$SCRIPT_TO_RUN" "$@"
