cxx_library(
    name = "a",
    srcs = [
        "a.c",
    ],
    exported_lang_preprocessor_flags = {
        "c": ["-DA_CFLAG"],
        "cxx": ["-DA_CXXFLAG"],
    },
    exported_linker_flags = [
        "-a-ld-flag",
    ],
    deps = [
        ":b",
    ],
)

cxx_library(
    name = "b",
    srcs = [
        "b.c",
    ],
    exported_lang_preprocessor_flags = {
        "c": ["-DB_CFLAG"],
        "cxx": ["-DB_CXXFLAG"],
    },
    exported_linker_flags = [
        "-b-ld-flag",
    ],
)

cxx_library(
    name = "dep_on_prebuilt_c",
    srcs = ["b.c"],
    deps = [":prebuilt_c"],
)

prebuilt_cxx_library(
    name = "prebuilt_c",
    static_lib = ":c#static-pic,default",
    visibility = ["PUBLIC"],
)

cxx_library(
    name = "c",
    srcs = [
        "c.c",
    ],
    exported_lang_preprocessor_flags = {
        "c": ["-DC_CFLAG"],
        "cxx": ["-DC_CXXFLAG"],
    },
    exported_linker_flags = [
        "-c-ld-flag",
    ],
)

cxx_library(
    name = "trivial",
    srcs = [
        "trivial.c",
    ],
)

cxx_library(
    name = "header",
    exported_headers = {
        "header.h": "real_header.h",
    },
)

cxx_binary(
    name = "binary",
    srcs = [
        "binary.c",
    ],
)

cxx_genrule(
    name = "rule",
    out = "rule.out",
    cmd = "@CMD@ > $OUT",
)

cxx_genrule(
    name = "with_out_rule",
    out = "rule.out",
    cmd = "@CMD@ > $OUT",
)

cxx_genrule(
    name = "without_out_rule",
    outs = {
        "output1": [
            "out1.txt",
        ],
        "output2": [
            "out2.txt",
        ],
    },
    default_outs = ["default.txt"],
    cmd = "echo thing1 @CMD@ > $OUT/out1.txt && echo thing2 @CMD@ > $OUT/out2.txt && echo default @CMD@ > $OUT/default.txt",
)
