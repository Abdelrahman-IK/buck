# setup go binary (shared object) and cgo_library (the actual exports)
go_exported_library(
    name = "shared",
    srcs = ["main.go"],
    build_mode = "c_shared",
    compiler_flags = ["-shared"],
    deps = [":example"],
)

cgo_library(
    name = "example",
    package_name = "cgo",
    srcs = [
        "export-to-c.go",
    ],
    cgo_compiler_flags = [],
    compiler_flags = [],
    headers = [],
)

# collect exported cgo headers
cxx_genrule(
    name = "cgo_exported_headers",
    out = "includes",
    cmd = (
        "mkdir -p $OUT && " +
        "cat `dirname $(location :shared)`/includes/*.h > $OUT/_cgo_export.h"
    ),
)

prebuilt_cxx_library(
    name = "cxx_so_with_header",
    header_dirs = [":cgo_exported_headers"],
    shared_lib = ":shared",
)

# setup example cpp binary that consumes generated .so file
cxx_binary(
    name = "main",
    srcs = ["main.cpp"],
    compiler_flags = [],
    link_style = "shared",
    deps = [
        ":cxx_so_with_header",
    ],
)
